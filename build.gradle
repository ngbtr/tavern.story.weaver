plugins {
    id 'java'
    id 'io.quarkus'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkiverse.langchain4j:quarkus-langchain4j-core:1.0.2'
    implementation 'io.quarkiverse.langchain4j:quarkus-langchain4j-openai:1.0.2'
    implementation 'io.quarkus:quarkus-config-yaml'
    implementation 'io.quarkus:quarkus-rest'
    implementation 'io.quarkus:quarkus-jdbc-postgresql'
    implementation 'io.quarkus:quarkus-redis-client'
    implementation 'io.quarkus:quarkus-rest-jackson'
    implementation 'io.quarkus:quarkus-arc'
    implementation'dev.langchain4j:langchain4j-core:0.26.1'
    implementation 'org.apache.commons:commons-lang3:3.14.0'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
}

group 'org.acme'
version '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

tasks.register('ensurePostgresRunning') {
    doLast {
        def composeFilePath = 'infra/storage/db/pg/compose'
        def check = ['docker-compose', 'ps', '--filter', 'status=running', '--services']
                .execute(null, new File(composeFilePath))
        def output = check.text.trim()

        if (!output.contains('dyb.tavern.postgres')) {
            println '🔄 Postgres container not running — starting via docker-compose...'

            def process = new ProcessBuilder(
                    'docker-compose',
                    '-f', 'docker-compose.yml',
                    'up', '-d', 'dyb.tavern.postgres'
            )
                    .directory(new File(composeFilePath))
                    .redirectErrorStream(true) // stderr + stdout вместе
                    .start()

            def reader = new BufferedReader(new InputStreamReader(process.inputStream))
            def line
            while ((line = reader.readLine()) != null) {
                println line
            }

            def exit = process.waitFor()
            if (exit != 0) {
                throw new GradleException("❌ docker-compose failed with exit code $exit")
            }
        } else {
            println '✅ Postgres container is already running.'
        }
    }
}


quarkusDev.dependsOn 'ensurePostgresRunning'

